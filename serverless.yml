# For full config options, check the docs:
#    docs.serverless.com

service: dragonball

provider:
  name: aws
  runtime: nodejs14.x
  stage: prod
  region: ${self:custom.envpath.region}
  environment:
    DB_HOST: ${self:custom.envpath.DB_HOST}
    DB_USER: ${self:custom.envpath.DB_USER}
    DB_PASSWORD: ${self:custom.envpath.DB_PASSWORD}
    DB_DATABASE: ${self:custom.envpath.DB_DATABASE}
    PUBLIC_KEY: ${self:custom.envpath.PUBLIC_KEY}
    BASE_URL: ${self:custom.envpath.BASE_URL}

package:
  individually: true

plugins:
  - serverless-prune-plugin
  - serverless-plugin-optimize

custom:
  envpath: "${file(./serverless.env.yml):${opt:stage, self:provider.stage}}"

functions:
  entry:
    handler: src/entry/handler.handler
    timeout: 5
    memorySize: 128
    environment:
      TOPIC_COMMAND_HANDLER: ${self:custom.envpath.TOPIC_COMMAND_HANDLER}
    events:
      - http:
          path: /
          method: POST
          integration: lambda-proxy
          cors: true

resources:
  Resources:
    IamRoleLambdaSNS:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"

    IamPolicyLambdaSNS:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: "${self:provider.stage}-${self:service}-SNSLambda"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - sns:*
            Resource:
            - arn:aws:sns:${self:custom.envpath.region}:*:*
        Roles:
        - Ref: IamRoleLambdaSNS
